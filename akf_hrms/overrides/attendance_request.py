from __future__ import unicode_literals
import frappe
from hrms.hr.doctype.attendance_request.attendance_request import AttendanceRequest
from frappe import _
from frappe.model.document import Document
from frappe.utils import date_diff, add_days, getdate, time_diff,time_diff_in_hours
from erpnext.setup.doctype.employee.employee import is_holiday
from hrms.hr.utils import validate_active_employee, validate_dates
from datetime import datetime
 

class AttendanceRequest(Document):
    #Function overide and Changed
	def validate(self):
		self.get_payroll_entry()	# checking payroll period created for the month in which employee applied for Attendance Request (commented on 11-04-2022)
		if not self.from_time:
			frappe.throw("Please Enter Valid From Time")
		if not self.to_time:
			frappe.throw("Please Enter Valid To Time")
		f_hr, f_min, f_sec = str(self.from_time).split(":")
		t_hr, t_min, t_sec = str(self.to_time).split(":")
		self.from_time = str(f_hr).zfill(2) + ":" + str(f_min).zfill(2) + ":" + str(f_sec).zfill(2)
		self.to_time = str(t_hr).zfill(2) + ":" + str(t_min).zfill(2) + ":" + str(t_sec).zfill(2)
		if str(self.to_time) < str(self.from_time):
			frappe.throw("To Time Cannot be less then From Time")
		validate_dates(self, self.from_date, self.to_date)
		if self.half_day:
			if not getdate(self.from_date)<=getdate(self.half_day_date)<=getdate(self.to_date):
				frappe.throw(_("Half day date should be in between from date and to date"))

		self.validate_supervisor()
		wfh_without_approval = check_wfh_approval()
		if self.reason == 'Work From Home' and (getdate(self.from_date) > getdate('2023-05-01')) and not wfh_without_approval:
			if self.company == 'MicroMerger (Pvt.) Ltd.':
				if not self.work_from_home_request:
					frappe.throw(_("Mandatory field required <b>Work From Home Request</b>"))
				self.check_wfh_days()
	#Custom Function			
	def check_wfh_days(self):
		if getdate(self.wfh_from) <= getdate(self.from_date) <= getdate(self.wfh_to):
			pass
		else:
			frappe.throw("Attendance Request date must be in between {0} and {1}".format(self.wfh_from, self.wfh_to))
	#Custom Function
	def validate_supervisor(self):
		pass
	#Function overide and changed
	def on_submit(self):
		self.get_payroll_entry()	# checking payroll period created for the month in which employee applied for Attendance Request (commented on 11-04-2022)
		emp_user_id = frappe.get_value("Employee", self.employee, "user_id")
		if emp_user_id == frappe.session.user:
			frappe.throw("You can not Submit your own Attendance Request!")
		self.create_attendance()
    
    #custom Function
	def get_payroll_entry(self):
		#mydate = datetime.strptime(self.from_date, '%Y-%m-%d')
		get_payroll = frappe.db.sql(""" select pe.name from `tabPayroll Entry` as pe, `tabPayroll Employee Detail` as ped 
						where pe.name=ped.parent and ped.employee=%s and pe.company='MicroMerger (Pvt.) Ltd.' 
						and pe.docstatus < 2 and %s between pe.start_date and pe.end_date order by pe.posting_date desc""",
						(self.employee, self.from_date))
		if get_payroll and frappe.session.user != 'Administrator':
			frappe.throw("You are not allowed for this action, Payroll generated by HR already for this period, so please contact HR department for further information.")
	
	#Function override and changed
	def create_attendance(self):
		request_days = date_diff(self.to_date, self.from_date) + 1
		for number in range(request_days):
			attendance_date = add_days(self.from_date, number)
			skip_attendance = self.validate_if_attendance_not_applicable(attendance_date)
			if not skip_attendance:
				if self.company == 'MicroMerger (Pvt.) Ltd.':
					for x in range(2):
						time_ = self.from_time
						if x == 1:
							time_ = self.to_time
						attendance = frappe.new_doc("Attendance Log")
						attendance.employee = self.employee
						attendance.log = str(attendance_date) + " " + str(time_)
						attendance.log_from = "Attendance Request"
						attendance.attendance_request = self.name
						attendance.reason = self.reason
						attendance.save(ignore_permissions=True)
						attendance.save()
				else:
					############ Check Shift timing #################################
					late_entry = early_exit = short_day = 0
					emp_shift_time = frappe.db.sql("""select st.start_time, st.end_time, st.enable_entry_grace_period, st.late_entry_grace_period, 
									st.enable_exit_grace_period, st.early_exit_grace_period, st.enable_short_day_period, 									st.short_day_grace_period from `tabShift Type` as st, `tabShift Assignment` as a_s 
									where a_s.shift_type=st.name and a_s.employee=%s and a_s.date<=%s and a_s.to_date>=%s """,
									(self.employee, attendance_date, attendance_date))
					if emp_shift_time:
						if emp_shift_time[0][2]:
							from_t_applied = str(attendance_date)+ " " +str(self.from_time)
							from_t2_assigned = str(attendance_date)+ " " +str(emp_shift_time[0][0])
							tth = time_diff_in_hours(from_t_applied, from_t2_assigned)
							if float(tth) >= 0.0:
								daysDiff_ = time_diff(str(self.from_time), str(emp_shift_time[0][0]))
								minutesDiff_ = daysDiff_.seconds / 60
								if int(minutesDiff_) > int(emp_shift_time[0][3]):
									late_entry = 1
						if emp_shift_time[0][4]:
							to_t_applied = str(attendance_date)+ " " +str(self.to_time)
							to_t_assigned = str(attendance_date)+ " " +str(emp_shift_time[0][1])
							tth2 = time_diff_in_hours(to_t_assigned, to_t_applied)
							if float(tth2) >= 0.0:
								daysDiff = time_diff(str(emp_shift_time[0][1]), str(self.to_time))
								minutesDiff = daysDiff.seconds / 60
								if int(minutesDiff) > int(emp_shift_time[0][5]):
									early_exit = 1
					res = frappe.db.sql("""select name,status from `tabAttendance` where employee = %s 
							and attendance_date = %s and employee_name = %s and docstatus = 1""",
							(self.employee, attendance_date, self.employee_name))
					if res:
						if res[0][1] != 'Half Day':
							frappe.db.set_value("Attendance", res[0][0], "status", "Present")
						frappe.db.set_value("Attendance", res[0][0], "check_in", self.from_time)
						frappe.db.set_value("Attendance", res[0][0], "check_out", self.to_time)
						frappe.db.set_value("Attendance", res[0][0], "late_entry", late_entry)
						frappe.db.set_value("Attendance", res[0][0], "early_exit", early_exit)
						frappe.db.set_value("Attendance", res[0][0], "short_day", 0)
						frappe.db.set_value("Attendance", res[0][0], "hours_worked", time_diff(self.to_time,self.from_time))
					else:
						attendance = frappe.new_doc("Attendance")
						attendance.employee = self.employee
						attendance.employee_name = self.employee_name
						if self.half_day and date_diff(getdate(self.half_day_date), getdate(attendance_date)) == 0:
							attendance.status = "Half Day"
						else:
							attendance.status = "Present"
						attendance.attendance_date = attendance_date
						attendance.company = self.company
						attendance.attendance_request = self.name
						for x in range(2):
							time_ = self.from_time
							if x == 1:
								time_ = self.to_time	
							logs_ = attendance.append("logs", {})
							logs_.log_time = time_
							logs_.type = "Attendance Request"
							logs_.reason = self.reason
						attendance.check_in = self.from_time
						attendance.check_out = self.to_time
						attendance.late_entry = late_entry
						attendance.early_exit = early_exit
						attendance.save(ignore_permissions=True)
						attendance.submit()

	#Function override and changed
	def validate_if_attendance_not_applicable(self, attendance_date):
		# Check if attendance_date is a Holiday
		#if is_holiday(self.employee, attendance_date):
		#	frappe.msgprint(_("Attendance not submitted for {0} as it is a Holiday.").format(attendance_date), alert=1)
		#	return True

		# Check if employee on Leave
		leave_record = frappe.db.sql("""select half_day from `tabLeave Application`
			where employee = %s and %s between from_date and to_date
			and docstatus = 1""", (self.employee, attendance_date), as_dict=True)
		if leave_record:
			frappe.msgprint(_("Attendance not submitted for {0} as {1} on leave.").format(attendance_date, self.employee), alert=1)
			return True

		return False
#custom function
@frappe.whitelist()
def get_check_in_out(date, emp):
	atte = frappe.db.sql(""" select check_in, check_out from `tabAttendance` where employee=%s and attendance_date = %s and docstatus =1 """, (emp, date))

	if atte:
		return atte[0][0], atte[0][1]
	else:
		return 0, 0

@frappe.whitelist()		
def check_wfh_approval():
	return frappe.db.get_single_value("HR Settings", 'wfh_without_approval')
